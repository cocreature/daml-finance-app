-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.App.Distribution.Fund.Model where

import DA.Assert ((===))
import DA.Set (singleton)
import Daml.Finance.App.Distribution.Investment.Model (InvestmentRequest)
import Daml.Finance.App.Interface.Issuance.Issuance qualified as Issuance (I)
import Daml.Finance.App.Interface.Issuance.Service qualified as IssuanceService (I, Issue(..), RequestIssue(..), asBase)
import Daml.Finance.Interface.Account.Account qualified as Account (K)
import Daml.Finance.Interface.Holding.Transferable qualified as Transferable (I)
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument (K, Q)
import Daml.Finance.Interface.Settlement.Instruction qualified as Instruction (Approve(..), I)
import Daml.Finance.Interface.Settlement.Types (Approval(TakeDelivery))
import Daml.Finance.Interface.Types.Common (Id, Parties)

type T = Fund

template Fund
  with
    operator : Party
    custodian : Party
    manager : Party
    id : Id
    description : Text
    instrument : Instrument.K
    currency : Instrument.K
    custodianCashAccount : Account.K
    managerFundAccount : Account.K
    totalUnits : Decimal
    observers : Parties
  where
    signatory operator, custodian, manager
    observer observers

    key (operator, custodian, id) : (Party, Party, Id)
    maintainer key._1

    nonconsuming choice GetFund : Fund
      with
        actor : Party
      controller actor
      do
        pure this

    choice IssueUnits : (ContractId Issuance.I, ContractId Transferable.I, ContractId Fund)
      with
        requestId : Id
        quantity : Instrument.Q
        issuanceServiceCid : ContractId IssuanceService.I
      controller manager
      do
        issuanceService <- view . IssuanceService.asBase <$> fetch issuanceServiceCid
        issuanceService.operator === operator
        issuanceService.provider === custodian
        issuanceService.customer === manager
        issueRequestCid <- exercise issuanceServiceCid IssuanceService.RequestIssue with issuanceId = requestId; description = "Issuance for request " <> show requestId; quantity; account = managerFundAccount
        (iss, holdingCid) <- exercise issuanceServiceCid IssuanceService.Issue with issueRequestCid
        newCid <- create this with totalUnits = totalUnits + quantity.amount
        pure (iss, coerceContractId holdingCid, newCid)

    nonconsuming choice ApproveInstruction : ContractId Instruction.I
      with
        instructionCid : ContractId Instruction.I
      controller manager
      do
        exercise instructionCid Instruction.Approve with actors = singleton manager; approval = TakeDelivery custodianCashAccount


template PooledInvestmentRequest
  with
    operator : Party
    provider : Party
    customer : Party
    requestId : Id
    asOfDate : Date
    fundId : Id
    quantity : Instrument.Q
    cashCid : ContractId Transferable.I
    investmentRequestCids : [ContractId InvestmentRequest]
    customerFundAccount : Account.K
  where
    signatory operator, provider, customer

    choice Remove : ()
      controller provider
      do pure ()
