-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.App.Distribution.Fund.Model where

import DA.Assert ((===))
import DA.Set (fromList, singleton)
import Daml.Finance.App.Interface.Common.Removable qualified as Removable (I, View(..))
import Daml.Finance.App.Interface.Distribution.Fund.Fund qualified as Fund (ApproveInstruction(..), HasImplementation, I, IssueUnits(..), View(..))
import Daml.Finance.App.Interface.Distribution.Fund.PooledInvestmentRequest qualified as PooledInvestmentRequest (HasImplementation, I, View(..))
import Daml.Finance.App.Interface.Distribution.Investment.InvestmentRequest qualified as InvestmentRequest (I)
import Daml.Finance.App.Interface.Issuance.Service qualified as IssuanceService (Issue(..), RequestIssue(..), asBase)
import Daml.Finance.Interface.Account.Account qualified as Account (K)
import Daml.Finance.Interface.Holding.Transferable qualified as Transferable (I)
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument (K, Q)
import Daml.Finance.Interface.Settlement.Instruction qualified as Instruction (Approve(..))
import Daml.Finance.Interface.Settlement.Types (Approval(TakeDelivery))
import Daml.Finance.Interface.Types.Common (AccountKey, Id, Parties)

type T = Fund

instance Fund.HasImplementation Fund

template Fund
  with
    operator : Party
    custodian : Party
    manager : Party
    id : Id
    description : Text
    instrument : Instrument.K
    currency : Instrument.K
    custodianCashAccount : AccountKey
    managerFundAccount : AccountKey
    totalUnits : Decimal
    observers : Parties
  where
    signatory operator, custodian, manager
    observer observers

    key (operator, custodian, id) : (Party, Party, Id)
    maintainer key._1

    interface instance Removable.I for Fund where
      view = Removable.View with removers = fromList [operator, custodian, manager]

    interface instance Fund.I for Fund where
      view = Fund.View with operator; custodian; manager; id; description; instrument; currency; custodianCashAccount; managerFundAccount; totalUnits; observers

      asRemovable = toInterface @Removable.I this

      issueUnits Fund.IssueUnits{requestId; quantity; issuanceServiceCid} = do
        issuanceService <- view . IssuanceService.asBase <$> fetch issuanceServiceCid
        issuanceService.operator === operator
        issuanceService.provider === custodian
        issuanceService.customer === manager
        issueRequestCid <- exercise issuanceServiceCid IssuanceService.RequestIssue with issuanceId = requestId; description = "Issuance for request " <> show requestId; quantity; account = managerFundAccount
        (iss, holdingCid) <- exercise issuanceServiceCid IssuanceService.Issue with issueRequestCid
        newCid <- toInterfaceContractId <$> create this with totalUnits = totalUnits + quantity.amount
        pure (iss, coerceContractId holdingCid, newCid)

      approveInstruction Fund.ApproveInstruction{instructionCid} = do
        -- TODO: Assert instruction is the correct one
        exercise instructionCid Instruction.Approve with actors = singleton manager; approval = TakeDelivery custodianCashAccount

instance PooledInvestmentRequest.HasImplementation PooledInvestmentRequest

template PooledInvestmentRequest
  with
    operator : Party
    provider : Party
    customer : Party
    requestId : Id
    asOfDate : Date
    fundId : Id
    quantity : Instrument.Q
    cashCid : ContractId Transferable.I
    investmentRequestCids : [ContractId InvestmentRequest.I]
    customerFundAccount : Account.K
  where
    signatory operator, provider, customer

    interface instance Removable.I for PooledInvestmentRequest where
      view = Removable.View with removers = fromList [operator, provider, customer]

    interface instance PooledInvestmentRequest.I for PooledInvestmentRequest where
      view = PooledInvestmentRequest.View with operator; provider; customer; requestId; asOfDate; fundId; quantity; cashCid; investmentRequestCids; customerFundAccount

      asRemovable = toInterface @Removable.I this

