-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.App.Distribution.Subscription.Service where

import DA.Action (foldlA)
import DA.Optional (whenSome)
import DA.Set (fromList, singleton)
import Daml.Finance.App.BackToBack.Service qualified as BackToBack
import Daml.Finance.App.Distribution.Subscription.Model (BackToBack, Offering(..), Status(..), Subscription)
import Daml.Finance.App.Distribution.Subscription.Util (settleSubscription)
import Daml.Finance.Interface.Common.Disclosure qualified as Disclosure (AddObserver(..))
import Daml.Finance.Interface.Asset.Account qualified as Account (K, R)
import Daml.Finance.Interface.Asset.Fungible qualified as Fungible (I)
import Daml.Finance.Interface.Asset.Instrument qualified as Instrument (Q)
import Daml.Finance.Interface.Asset.Lockable qualified as Lockable (Lock(..), Unlock(..))
import Daml.Finance.Interface.Asset.Util (getAccount)
import Daml.Finance.Interface.Settlement.Instructable qualified as Instructable (I)

template Service
  with
    operator : Party
    provider : Party
    customer : Party
    public : Party
  where
    signatory operator, provider, customer

    key (operator, provider, customer) : (Party, Party, Party)
    maintainer key._1

    nonconsuming choice CreateOffering : ContractId Offering
      with
        offeringId : Text
        asset : Instrument.Q
        price : Instrument.Q
        customerHoldingCid : ContractId Fungible.I
        customerAccount : Account.K
        backToBack : Optional BackToBack
      controller customer
      do
        -- Disclose holding
        customerHolding <- fetch customerHoldingCid
        customerHoldingCid : ContractId Fungible.I <- coerceContractId <$> exercise customerHoldingCid Disclosure.AddObserver with actor = singleton customer; observerToAdd = (offeringId, singleton provider)
        -- Disclose delivering securities account
        let customerSendingAccount = getAccount customerHolding
        (_, delRef) <- fetchByKey @Account.R customerSendingAccount
        exercise delRef.cid Disclosure.AddObserver with actor = singleton customer; observerToAdd = (offeringId, singleton provider)
        -- Disclose receiving cash account
        (_, recRef) <- fetchByKey @Account.R customerAccount
        exercise recRef.cid Disclosure.AddObserver with actor = singleton customer; observerToAdd = (offeringId, singleton provider)
        -- Lock holding
        customerHoldingCid <- coerceContractId <$> exercise customerHoldingCid Lockable.Lock with newLocker = fromList [ provider ]

        -- Lock back-to-back assets
        lockedB2b <-
          case backToBack of
            Some b2b -> do Some <$> exerciseByKey @BackToBack.Service (operator, b2b.party, customer) BackToBack.LockOffering with backToBack = b2b
            None -> pure None

        create Offering
          with
            operator; provider; public; asset; price; offeringId
            issuer = customer
            issuerHoldingCid = customerHoldingCid
            issuerAccount = customerAccount
            backToBack = lockedB2b
            status = Open

    nonconsuming choice ProcessOffering : ContractId Offering
      with
        instructableCid : ContractId Instructable.I
        offeringCid : ContractId Offering
        subscriptionCids : [ContractId Subscription]
      controller provider
      do
        -- Settle subscriptions
        offering <- fetch offeringCid
        subscriptions <- zip subscriptionCids <$> forA subscriptionCids fetch
        (remainingIssuerQuantity, remainingIssuerHoldingCidOpt) <- foldlA (settleSubscription instructableCid offering) (offering.asset.amount, Some offering.issuerHoldingCid) subscriptions

        -- Settle back-to-back trade
        whenSome offering.backToBack \b2b -> do
          let
            totalQuantity = sum $ map ((.quantity) . snd) subscriptions
          exerciseByKey @BackToBack.Service (operator, b2b.party, customer) BackToBack.SettleOffering with instructableCid; offeringCid; totalQuantity
          pure ()

        -- Archive offer and subscriptions
        archive offeringCid
        -- forA_ subscriptionCids archive

        -- Unlock remaining issuer holding
        whenSome remainingIssuerHoldingCidOpt \holdingCid -> do
          exercise holdingCid Lockable.Unlock
          pure ()

        create offering with status = Closed

    choice Terminate : ()
      with
        actor : Party
      controller actor
      do
        assert $ actor == operator || actor == provider || actor == customer
        pure ()

template Offer
  with
    operator : Party
    provider : Party
    customer : Party
    public : Party
  where
    signatory operator, provider
    observer customer

    choice Accept : ContractId Service
      controller customer
      do
        create Service with ..

    choice Decline : ()
      controller customer
      do
        return ()

    choice Withdraw : ()
      controller provider
      do pure ()

template Request
  with
    provider : Party
    customer : Party
    public : Party
  where
    signatory customer
    observer provider

    choice Cancel : ()
      controller customer
      do pure ()

    choice Reject : ()
      controller provider
      do pure ()

    choice Approve : ContractId Service
      with
        operator : Party
      controller operator, provider
      do
        create Service with ..
