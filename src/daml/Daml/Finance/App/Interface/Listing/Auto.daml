-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.App.Interface.Listing.Auto where

import Daml.Finance.App.Interface.Base.Service qualified as Base (I)
import Daml.Finance.App.Interface.Listing.Listing qualified as Listing (I)
import Daml.Finance.App.Interface.Listing.Service qualified as Service (I, Implementation, asBase)
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument (K)
import Daml.Finance.Interface.Types.Common (Id, Parties)

type I = Service

type V = View

data View = View {}
  deriving (Eq, Show)

interface Service where
  viewtype V

  asService : Service.I
    -- ^ Conversion to custody `Service` interface.
  requestAndList : ContractId Service.I -> RequestAndList -> Update (ContractId Listing.I)
    -- ^ Implementation of the `RequestAndList` choice.
  requestAndDelist : ContractId Service.I -> RequestAndDelist -> Update ()
    -- ^ Implementation of the `RequestAndDelist` choice.

  nonconsuming choice RequestAndList : (ContractId Listing.I)
    with
      listingId : Id
      description : Text
      tradedInstrument : Instrument.K
      quotedInstrument : Instrument.K
      observers : Parties
    controller (view $ Service.asBase $ asService this).customer
    do
      requestAndList this (toInterfaceContractId self) arg

  nonconsuming choice RequestAndDelist : ()
    with
      listingCid : ContractId Listing.I
    controller (view $ Service.asBase $ asService this).customer
    do
      requestAndDelist this (toInterfaceContractId self) arg

-- | Type constraint for requiring templates to implement `Service`.
type Implementation t = (HasToInterface t Service, Service.Implementation t)
class (Implementation t) => HasImplementation t
instance HasImplementation Service
instance HasToInterface Service Service.I where _toInterface = asService
instance HasToInterface Service Base.I where _toInterface = Service.asBase . asService
