-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.App.Interface.Distribution.Auction.Auto where

import Daml.Finance.App.Interface.Base.Service qualified as Base (I)
import Daml.Finance.App.Interface.Distribution.Auction.Auction qualified as Auction (I)
import Daml.Finance.App.Interface.Distribution.Auction.Service qualified as Service (I, Implementation, asBase)
import Daml.Finance.Interface.Holding.Fungible qualified as Fungible (I)
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument (K, Q)
import Daml.Finance.Interface.Types.Common (AccountKey, Id, Parties)

type I = Service

type V = View

data View = View {}
  deriving (Eq, Show)

interface Service where
  viewtype V

  asService : Service.I
    -- ^ Conversion to custody `Service` interface.
  requestAndCreateAuction : ContractId Service.I -> RequestAndCreateAuction -> Update (ContractId Auction.I)
    -- ^ Implementation of the `RequestAndCreateAuction` choice.

  nonconsuming choice RequestAndCreateAuction : (ContractId Auction.I)
    with
      auctionId : Id
      description : Text
      quantity : Instrument.Q
      currency : Instrument.K
      floor : Decimal
      collateralCid : ContractId Fungible.I
      receivableAccount : AccountKey
      observers : Parties
    controller (view $ Service.asBase $ asService this).customer
    do
      requestAndCreateAuction this (toInterfaceContractId self) arg

-- | Type constraint for requiring templates to implement `Service`.
type Implementation t = (HasToInterface t Service, Service.Implementation t)
class (Implementation t) => HasImplementation t
instance HasImplementation Service
instance HasToInterface Service Service.I where _toInterface = asService
instance HasToInterface Service Base.I where _toInterface = Service.asBase . asService
