-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.App.Trading.Service where

import DA.Action (foldlA, when)
import DA.Optional (isNone)
import DA.Set (singleton)
import Daml.Finance.Interface.Asset.Account qualified as Account (K, exerciseInterfaceByKey)
import Daml.Finance.Interface.Asset.Fungible qualified as Fungible (I)
import Daml.Finance.Interface.Asset.Instrument qualified as Instrument (Q)
import Daml.Finance.Interface.Asset.Lockable qualified as Lockable (Lock(..), Unlock(..))
import Daml.Finance.Interface.Asset.Util (getAccount)
import Daml.Finance.Interface.Common.Disclosure qualified as Disclosure (I, AddObserver(..), RemoveObserver(..))
import Daml.Finance.Interface.Common.Types (Parties)
import Daml.Finance.Interface.Settlement.Instructable qualified as Instructable (I)
import Daml.Finance.Interface.Settlement.Instruction qualified as Instruction (Approve(..))
import Daml.Finance.Interface.Settlement.Settleable qualified as Settleable (Settle(..))
import Daml.Finance.App.Trading.Model (ApproveInstruction(..), CreateOrderRequest(..), CancelOrderRequest(..), Fill(..), FillResult(..), Order(..), Side(..))
import Daml.Finance.App.Util (fetchAndArchive)

template Service
  with
    operator : Party
    provider : Party
    customer : Party
    instructableCid : ContractId Instructable.I
  where
    signatory operator, provider, customer

    key (operator, provider, customer) : (Party, Party, Party)
    maintainer key._1

    nonconsuming choice RequestCreateOrder : ContractId CreateOrderRequest
      with
        id : Text
        listingId : Text
        quantity : Instrument.Q
        price : Instrument.Q
        side : Side
        collateralCid : ContractId Fungible.I
        account : Account.K
        observers : Parties
        orderCids : [ContractId Order]
      controller customer
      do
        timestamp <- getTime
        collateral <- fetch collateralCid
        disclosedCollateralCid <- coerceContractId <$> exercise collateralCid Disclosure.AddObserver with actor = singleton customer; observerToAdd = (id, singleton provider)
        Account.exerciseInterfaceByKey @Disclosure.I (getAccount collateral) (singleton customer) Disclosure.AddObserver with actor = singleton customer; observerToAdd = (id, singleton provider)
        Account.exerciseInterfaceByKey @Disclosure.I account (singleton customer) Disclosure.AddObserver with actor = singleton customer; observerToAdd = (id, singleton provider)
        create CreateOrderRequest with operator; provider; customer; id; timestamp; listingId; quantity; price; side; collateralCid = disclosedCollateralCid; account; orderCids; observers

    nonconsuming choice RequestCancelOrder : ContractId CancelOrderRequest
      with
        orderCid : ContractId Order
      controller customer
      do
        create CancelOrderRequest with operator; provider; customer; orderCid

    nonconsuming choice CreateOrder : Optional (ContractId Order, Order)
      with
        createOrderRequestCid : ContractId CreateOrderRequest
      controller provider
      do
        CreateOrderRequest{operator; provider; customer; id; timestamp; listingId; quantity; price; side; collateralCid; account; orderCids; observers} <- fetchAndArchive createOrderRequestCid
        lockedCollateralCid : ContractId Fungible.I <- coerceContractId <$> exercise collateralCid Lockable.Lock with newLocker = (singleton provider)
        orderCid <- create Order with operator; provider; customer; id; timestamp; listingId; quantity; price; side; collateralCid = lockedCollateralCid; account; observers
        exercise self ExecuteOrder with orderCid; orderCids

    nonconsuming choice CancelOrder : ()
      with
        cancelOrderRequestCid : ContractId CancelOrderRequest
      controller provider
      do
        CancelOrderRequest{orderCid} <- fetchAndArchive cancelOrderRequestCid
        order <- fetchAndArchive orderCid
        exercise order.collateralCid Lockable.Unlock
        pure ()

    nonconsuming choice ExecuteOrder : Optional (ContractId Order, Order)
      with
        orderCid : ContractId Order
        orderCids : [ContractId Order]
      controller provider
      do
        order <- fetch orderCid
        orders <- filter (\(_, o) -> o.side == if order.side == Buy then Sell else Buy) . zip orderCids <$> mapA fetch orderCids
        let
          match : Optional (ContractId Order, Order) -> (ContractId Order, Order) -> Update (Optional (ContractId Order, Order))
          match myOpt (otherCid, other) =
            case myOpt of
              None -> do
                pure None
              Some (myCid, my) | my.side == Buy && my.price.amount < other.price.amount || my.side == Sell && my.price.amount > other.price.amount -> do
                pure myOpt
              Some (myCid, my) -> do
                myCollateral <- fetch my.collateralCid
                otherCollateral <- fetch other.collateralCid
                FillResult{orderOpt; settleableCid; instructionCid} <- exercise myCid Fill with instructableCid; other
                exercise otherCid ApproveInstruction with instructionCid
                [transferableCid] <- exercise settleableCid Settleable.Settle
                -- TODO: Only works once we remove the owner as controller from Unlock (update Daml.Finance to get that in)
                -- exercise transferableCid Lockable.Unlock
                FillResult{orderOpt = otherOpt; settleableCid; instructionCid} <- exercise otherCid Fill with instructableCid; other = my
                exercise instructionCid Instruction.Approve with receiverAccount = my.account
                [transferableCid] <- exercise settleableCid Settleable.Settle
                exercise transferableCid Lockable.Unlock
                when (isNone orderOpt) do
                  Account.exerciseInterfaceByKey @Disclosure.I my.account (singleton provider) Disclosure.RemoveObserver with observerToRemove = (my.id, singleton provider)
                  Account.exerciseInterfaceByKey @Disclosure.I (getAccount myCollateral) (singleton provider) Disclosure.RemoveObserver with observerToRemove = (my.id, singleton provider)
                  pure ()
                when (isNone otherOpt) do
                  Account.exerciseInterfaceByKey @Disclosure.I other.account (singleton provider) Disclosure.RemoveObserver with observerToRemove = (other.id, singleton provider)
                  Account.exerciseInterfaceByKey @Disclosure.I (getAccount otherCollateral) (singleton provider) Disclosure.RemoveObserver with observerToRemove = (other.id, singleton provider)
                  pure ()
                pure orderOpt
        foldlA match (Some (orderCid, order)) orders

    choice Terminate : ()
      with
        actor : Party
      controller actor
      do
        assert $ actor == operator || actor == provider || actor == customer
        pure ()

template Offer
  with
    operator : Party
    provider : Party
    customer : Party
    instructableCid : ContractId Instructable.I
  where
    signatory operator, provider
    observer customer

    choice Accept : ContractId Service
      controller customer
      do
        create Service with operator; provider; customer; instructableCid

    choice Decline : ()
      controller customer
      do
        return ()

    choice Withdraw : ()
      controller provider
      do pure ()

template Request
  with
    customer : Party
    provider : Party
  where
    signatory customer

    choice Cancel : ()
      controller customer
      do pure ()

    choice Reject : ()
      controller provider
      do pure ()

    choice Approve : ContractId Service
      with
        operator : Party
        instructableCid : ContractId Instructable.I
      controller operator, provider
      do
        create Service with operator; provider; customer; instructableCid
