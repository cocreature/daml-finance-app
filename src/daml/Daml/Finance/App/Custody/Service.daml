-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Daml.Finance.App.Custody.Service where

import DA.Set (fromList)
import Daml.Finance.Interface.Holding.Account qualified as Account (Credit(..), Debit(..), K, R)
import Daml.Finance.Interface.Holding.Base qualified as Holding (I)
import Daml.Finance.Interface.Holding.Util (getAccount)
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument (K, Q)
import Daml.Finance.Interface.Settlement.Factory qualified as Settlement (Factory)
import Daml.Finance.Interface.Lifecycle.Rule.Claim qualified as Lifecycle (Claim)
import Daml.Finance.Lifecycle.Rule.Claim qualified as Lifecycle (Rule(..))
import Daml.Finance.App.Custody.Model qualified as Custody
import Daml.Finance.App.Util (fetchAndArchive)
import Prelude hiding (lookup)

template Service
  with
    operator : Party
    provider : Party
    customer : Party
    claimRuleCid : ContractId Lifecycle.Claim
  where
    signatory operator, provider, customer

    key (operator, provider, customer) : (Party, Party, Party)
    maintainer key._1

    nonconsuming choice RequestDeposit : ContractId Custody.DepositRequest
      with
        quantity : Instrument.Q
        account : Account.K
      controller customer
      do
        create Custody.DepositRequest with ..

    nonconsuming choice RequestWithdrawal : ContractId Custody.WithdrawalRequest
      with
        instrument : Instrument.K
        holdingCid : ContractId Holding.I
      controller customer
      do
        create Custody.WithdrawalRequest with ..

    nonconsuming choice Deposit : ContractId Holding.I
      with
        depositRequestCid : ContractId Custody.DepositRequest
      controller provider
      do
        Custody.DepositRequest{quantity; account} <- fetchAndArchive depositRequestCid
        (_, ref) <- fetchByKey @Account.R account
        exercise ref.cid Account.Credit with quantity

    nonconsuming choice Withdrawal : ()
      with
        withdrawalRequestCid : ContractId Custody.WithdrawalRequest
      controller provider
      do
        Custody.WithdrawalRequest{holdingCid} <- fetchAndArchive withdrawalRequestCid
        holding <- fetch holdingCid
        let account = getAccount holding
        (_, ref) <- fetchByKey @Account.R account
        exercise ref.cid Account.Debit with holdingCid

    choice Terminate : ()
      with
        actor : Party
      controller actor
      do
        assert $ actor == operator || actor == provider || actor == customer
        pure ()

template Offer
  with
    operator : Party
    provider : Party
    customer : Party
    factoryCid : ContractId Settlement.Factory
  where
    signatory operator, provider
    observer customer

    choice Accept : ContractId Service
      controller customer
      do
        claimRuleCid <- toInterfaceContractId <$> create Lifecycle.Rule with custodian = provider; owner = customer; claimers = fromList [provider, customer]; settler = provider; factoryCid
        create Service with operator; provider; customer; claimRuleCid

    choice Decline : ()
      controller customer
      do pure ()

    choice Withdraw : ()
      controller provider
      do pure ()

template Request
  with
    customer : Party
    provider : Party
  where
    signatory customer
    observer provider

    choice Cancel : ()
      controller customer
      do pure ()

    choice Reject : ()
      controller provider
      do pure ()

    choice Approve : ContractId Service
      with
        operator : Party
        factoryCid : ContractId Settlement.Factory
      controller operator, provider
      do
        claimRuleCid <- toInterfaceContractId <$> create Lifecycle.Rule with custodian = provider; owner = customer; claimers = fromList [provider, customer]; settler = provider; factoryCid
        create Service with operator; provider; customer; claimRuleCid
