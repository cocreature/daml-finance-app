-- Copyright (c) 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Tests.DeFi.FlashSwap.Dvp where

import DA.Set (empty, fromList, singleton)
import Daml.Finance.Interface.Asset.Holding (Issue(..))
import Daml.Finance.Interface.Asset.Transferable (Transferable, Transfer(..))
import Daml.Script
import DeFi.FlashSwap.Dvp (Dvp, Deliver(..), FlashPayAndSettle(..), Pay(..), Settle(..))
import DeFi.Interface.FlashSwapAction (FlashSwapAction)
import Tests.Setup (LedgerParties(..), LedgerTokens(..), createDvp, setupParties, setupTokens)

testDvpSettlement : Script ()
testDvpSettlement = do
  -- Setup
  LedgerParties{..} <- setupParties
  LedgerTokens{..} <- setupTokens LedgerParties{..}

  -- Distributed tokens
  aliceEthCid <- submit custodian1 do exerciseCmd ethInstrumentCid Issue with quantity = 10.0
  let aliceEthTransferable : ContractId Transferable = coerceContractId aliceEthCid
  aliceEthCid <- submitMulti [custodian1, alice] [] do exerciseCmd aliceEthTransferable Transfer with newOwners = singleton alice
  bobUsdcCid <- submit custodian2 do exerciseCmd usdcInstrumentCid Issue with quantity = 42_390.0
  let bobUsdcTransferable : ContractId Transferable = coerceContractId bobUsdcCid
  bobUsdcCid <- submitMulti [custodian2, bob] [] do exerciseCmd bobUsdcTransferable Transfer with newOwners = singleton bob

  -- Alice <-> Bob
  dvpCid <- createDvp alice (10.0, ethInstrumentCid) bob (42_390.0, usdcInstrumentCid) empty public
  (dvpCid, _) <- submitMulti [alice, public] [] do exerciseCmd dvpCid Deliver with actors = fromList [alice, public]; tokenCid = aliceEthCid
  (dvpCid, _) <- submitMulti [bob, public] [] do exerciseCmd dvpCid Pay with actors = fromList [bob, public]; tokenCid = bobUsdcCid
  submit bob do exerciseCmd dvpCid Settle with actors = singleton bob

  return ()

-- settle trade where right counterparty has committed
-- ccp <->* bob
template DeliverAndSettleDvp with
    ccp : Party
    dvpAllocatedCid : ContractId Dvp
    public : Party
  where
    signatory ccp, public

    implements FlashSwapAction where
      let action = \deliveryTokenCid -> do
          (dvpCid, restCids) <- exercise dvpAllocatedCid Deliver with actors = fromList [ccp, public], tokenCid = deliveryTokenCid
          (payedCid, deliveredCid) <- exercise dvpCid Settle with actors = fromList [ccp, public]
          return (payedCid, deliveredCid :: restCids)

{-  alice *<-> ccp <->* bob

    ccp can settle a trade between alice and bob (i.e., without using a
    FlashLoan facility or any assets upfront)
-}
testFlashSwapDvpTradeSettlement : Script ()
testFlashSwapDvpTradeSettlement = do
  -- Setup
  LedgerParties{..} <- setupParties
  LedgerTokens{..} <- setupTokens LedgerParties{..}

  -- Distribute tokens
  aliceEthCid <- submit custodian1 do exerciseCmd ethInstrumentCid Issue with quantity = 10.0
  let aliceEthTransferable : ContractId Transferable = coerceContractId aliceEthCid
  aliceEthCid <- submitMulti [custodian1, alice] [] do exerciseCmd aliceEthTransferable Transfer with newOwners = singleton alice
  bobUsdcCid <- submit custodian2 do exerciseCmd usdcInstrumentCid Issue with quantity = 42_390.0
  let bobUsdcTransferable : ContractId Transferable = coerceContractId bobUsdcCid
  bobUsdcCid <- submitMulti [custodian2, bob] [] do exerciseCmd bobUsdcTransferable Transfer with newOwners = singleton bob

  -- Alice *<-> CCP <->* Bob
  dvp1Cid <- createDvp alice (10.0, ethInstrumentCid) ccp (42_390.0, usdcInstrumentCid) empty public
  dvp2Cid <- createDvp ccp (10.0, ethInstrumentCid) bob (42_390.0, usdcInstrumentCid) empty public
  (dvp1Cid, _) <- submitMulti [alice, public] [] do exerciseCmd dvp1Cid Deliver with actors = fromList [alice, public]; tokenCid = aliceEthCid
  (dvp2Cid, _) <- submitMulti [bob, public] [] do exerciseCmd dvp2Cid Pay with actors = fromList [bob, public]; tokenCid = bobUsdcCid

  -- Prepare settlement (as ccp <->* bob FlashSwapAction )
  flashSwapActionCid <- toInterfaceContractId <$> submitMulti [ccp, public] [] do createCmd DeliverAndSettleDvp with ccp; dvpAllocatedCid = dvp2Cid; public

  -- Settle dvp1 and dvp2 using FlashSwapAction
  submitMulti [ccp, public] [] do exerciseCmd dvp1Cid FlashPayAndSettle with actors = fromList [ccp, public]; actionCid = flashSwapActionCid

  pure ()

-- A *<-> B <-> C <-> ... <->* N
template CommittedSettlementUtility with
    sp : Party
    dvpCids : [ContractId Dvp]
    public : Party
  where
    signatory sp, public

    choice SettleUtility : ()
      controller sp
        do
          case dvpCids of
            [] ->
              abort "Nothing to settle"
            [h] -> do
              exercise h Settle with actors = fromList [sp, public]
              return ()
            h::t -> do
              iCid <- toInterfaceContractId <$> create CommittedSettlement with sp; dvpCids = t; public
              exercise h FlashPayAndSettle with actors = fromList [sp, public]; actionCid = iCid
              return ()
          return ()

-- settle DvpChain
-- B *<-> C <-> .. <->* N
template CommittedSettlement with
    sp : Party
    dvpCids : [ContractId Dvp]
    public : Party
  where
    signatory sp, public

    implements FlashSwapAction where
      let action = \deliverCid ->
            do
              case dvpCids of
                [] -> do
                  abort "nothing to settle"
                [h] -> do
                  (dvpCid, restCids) <- exercise h Deliver with actors = fromList [sp, public]; tokenCid = deliverCid
                  (payedCid, deliveredCid) <- exercise dvpCid Settle with actors = fromList [sp, public]
                  return (payedCid, deliveredCid :: restCids)
                h::t -> do
                  (dvpCid, restCids) <- exercise h Deliver with actors = fromList [sp, public]; tokenCid = deliverCid
                  psICid <- toInterfaceContractId <$> create CommittedSettlement with sp, dvpCids = t; public
                  (payedCid, flashRestCids) <- exercise dvpCid FlashPayAndSettle with actors = fromList [sp, public]; actionCid = psICid
                  return (payedCid, flashRestCids <> restCids)

  {-                      sp
         /        /        |        \        \
     alice *<-> bob <-> charlie <-> dave <->* erin

     settle chain of dvps as a settlement participant (sp) (with rights to
     split/merge/allocate/settle on behalf of trading participants) :
  -}
testFlashSwapDvpChainSettlement : Script ()
testFlashSwapDvpChainSettlement = do
  -- Setup
  LedgerParties{..} <- setupParties
  LedgerTokens{..} <- setupTokens LedgerParties{..}

  -- Distribute tokens
  aliceEthCid <- submit custodian1 do exerciseCmd ethInstrumentCid Issue with quantity = 10.0
  let aliceEthTransferable : ContractId Transferable = coerceContractId aliceEthCid
  aliceEthCid <- submitMulti [custodian1, alice] [] do exerciseCmd aliceEthTransferable Transfer with newOwners = singleton alice
  erinUsdcCid <- submit custodian2 do exerciseCmd usdcInstrumentCid Issue with quantity = 42_390.0
  let erinUsdcTransferable : ContractId Transferable = coerceContractId erinUsdcCid
  erinUsdcCid <- submitMulti [custodian2, erin] [] do exerciseCmd erinUsdcTransferable Transfer with newOwners = singleton erin

  -- Create dvps
  dvp1Cid <- createDvp alice    (10.0, ethInstrumentCid) bob      (42_390.0, usdcInstrumentCid) (singleton sp) public
  dvp2Cid <- createDvp bob      (10.0, ethInstrumentCid) charlie  (42_390.0, usdcInstrumentCid) (singleton sp) public
  dvp3Cid <- createDvp charlie  (10.0, ethInstrumentCid) dave     (42_390.0, usdcInstrumentCid) (singleton sp) public
  dvp4Cid <- createDvp dave     (10.0, ethInstrumentCid) erin     (42_390.0, usdcInstrumentCid) (singleton sp) public

  -- Create dynamic controllers
  -- NOTE: Not supported in current version of daml-finance
  -- let cDC (account : Account) =
  --       submitMulti (S.toList account.id.signatories) [] do
  --         createCmd EquityControllers with
  --           account
  --           controllers = [S.singleton sp, account.owners]
  -- mapA cDC [accounts.alice.eth, accounts.alice.usdc, accounts.bob.eth,
  --   accounts.bob.usdc, accounts.charlie.eth, accounts.charlie.usdc,
  --   accounts.dave.eth, accounts.dave.usdc, accounts.erin.eth,
  --   accounts.erin.usdc]

  -- Trading participants at the very left and right can allocate
  (dvp1Cid, _) <- submitMulti [alice, public] [] do exerciseCmd dvp1Cid Deliver with actors = fromList [alice, public]; tokenCid = aliceEthCid
  (dvp4Cid, _) <- submitMulti [erin, public] [] do exerciseCmd dvp4Cid Pay with actors = fromList [erin, public]; tokenCid = erinUsdcCid

  -- Settlement participant creates committed settlement utility
  settleTradeCid <- submitMulti [sp, public] [] do createCmd CommittedSettlementUtility with sp; dvpCids = [dvp1Cid, dvp2Cid, dvp3Cid, dvp4Cid]; public

  -- Settlement participant settles chain
  submitMulti [sp, public] [] do exerciseCmd settleTradeCid SettleUtility

  return ()